---
# Global configuration
global:
  # Kubernetes namespace where all Kasm resources will be deployed (overrides Release.Namespace)
  namespace: ""
  # Kubernetes clusterDomain name - default K8s Cluster Domain is "cluster.local"
  clusterDomain: "cluster.local"

  # Image configuration
  image:
    # Global Docker registry secret names
    pullSecrets: []
    # Global image pull policy
    pullPolicy: IfNotPresent
    # Global image restart policy
    restartPolicy: Always

  # Ingress configuration
  ingressClassName: ""
  # Global hostname to use for TLS Certificates and ingress URL
  hostname: ""
  # Alternative hostnames for certificates
  altHostnames: []

# Kasm application configuration
kasm:
  # Application name used as resource label prefix
  name: kasm
  # Service zone name for the initial zone configuration
  zoneName: default
  # Apply Pod and Deployment-level security hardening
  applyHardening: true
  # Set container resources and replicas according to preset (small, medium, large)
  deploymentSize: "small"

# Database configuration
database:
  # Deploy internal PostgreSQL database
  deploy: true
  # Use external database instead of internal one
  external:
    enabled: false
    # External database connection parameters
    host: ""
    port: 5432
    database: "kasm"
    username: "kasmapp"
    # Existing secret containing database password
    existingSecret: ""
    # Key in the existing secret containing the password
    existingSecretPasswordKey: "password"
    # SSL mode for database connection
    sslMode: "prefer"
    # Optional master (superuser) credentials to allow bootstrap (create DB / extensions)
    master:
      existingSecret: ""
      existingSecretPasswordKey: "password"
      username: "" # if empty defaults to external.username

  # Internal database configuration (when deploy: true)
  internal:
    image:
      repository: kasmweb/postgres
      tag: 1.17.0
    resources: {}
    # Storage class for persistent volume
    storageClassName: ""
    # Storage size
    storageSize: "10Gi"
    # Persistent volume claim retention policy
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: "Retain"
      whenScaled: "Retain"

# Redis configuration
redis:
  deploy: true
  image:
    repository: redis
    tag: "5-alpine"
  resources: {}
  # Use external Redis instance
  external:
    enabled: false
    host: ""
    port: 6379
    # Existing secret containing Redis password
    existingSecret: ""
    existingSecretPasswordKey: "password"

# Kasm service passwords (leave blank for auto-generation)
passwords:
  # Password for Redis service
  redisPassword: ""
  # Password for PostgreSQL database
  dbPassword: ""
  # Manager token for Kasm Agent registration
  managerToken: ""
  # Service token for RDP service registration
  serviceToken: ""
  # Password for admin@kasm.local user
  adminPassword: ""
  # Password for user@kasm.local user
  userPassword: ""

# Certificate management
certificates:
  # Use cert-manager for automatic certificate provisioning
  certManager:
    enabled: false
    # Certificate issuer name (ClusterIssuer or Issuer)
    issuerName: ""
    # Certificate issuer kind
    issuerKind: "ClusterIssuer"

  # Certificate configurations for different services
  ingress:
    # Use existing TLS secret
    existingSecret: ""
    # Create new certificate (either via cert-manager or self-signed)
    create: true
    # Manually provided certificate (PEM format)
    certificate: ""
    # Manually provided private key (PEM format)
    privateKey: ""

  proxy:
    existingSecret: ""
    create: true
    certificate: ""
    privateKey: ""

  rdpGateway:
    existingSecret: ""
    create: true
    certificate: ""
    privateKey: ""

# Kasm services configuration
services:
  # Kasm API service
  api:
    name: kasm-api
    enabled: true
    replicas: 1
    image:
      repository: kasmweb/api
      tag: 1.17.0
    resources: {}
    # Health check configuration
    healthcheck:
      enabled: true
      path: "/api/__healthcheck"
      port: 8080
    # API configuration file settings
    config:
      # Database connection settings
      database:
        pool_size: 10
        max_overflow: 20
      # Manager configuration
      manager:
        manager_id: null
        update_timer: 86400
      # Server configuration
      server:
        server_id: null
        server_hostname: null
        sanitize_errors: true
        internal_schema: "https"
        kubernetes: false
      # Share configuration
      share:
        share_id: null
      # Additional configuration parameters can be added here
      additional: {}

  # Kasm Manager service
  manager:
    name: kasm-manager
    enabled: true
    replicas: 1
    image:
      repository: kasmweb/manager
      tag: 1.17.0
    resources: {}
    healthcheck:
      enabled: true

  # Kasm Proxy service (Nginx)
  proxy:
    name: kasm-proxy
    enabled: true
    replicas: 1
    image:
      repository: kasmweb/proxy
      tag: 1.17.0
    resources: {}
    # Nginx keepalive timeout for upstream services
    serviceKeepalive: 16
    healthcheck:
      enabled: true

  # Guacamole service for remote desktop connections
  guac:
    name: kasm-guac
    enabled: true
    replicas: 1
    image:
      repository: kasmweb/kasm-guac
      tag: 1.17.0
    resources: {}
    healthcheck:
      enabled: true

  # RDP Gateway service
  rdpGateway:
    name: kasm-rdp-gateway
    enabled: false
    replicas: 1
    image:
      repository: kasmweb/rdp-gateway
      tag: 1.17.0
    resources: {}
    healthcheck:
      enabled: true

  # HTTPS RDP Gateway service
  rdpHttpsGateway:
    name: kasm-rdp-https-gateway
    enabled: false
    replicas: 1
    image:
      repository: kasmweb/rdp-https-gateway
      tag: 1.17.0
    resources: {}
    healthcheck:
      enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use
  name: ""

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Security contexts
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
