{{/*
Kasm Passwords Secret
*/}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "kasm.fullname" . }}-passwords
  namespace: {{ include "kasm.namespace" . }}
  labels:
    {{- include "kasm.commonLabels" . | nindent 4 }}
    {{- include "kasm.componentLabels" "passwords" | nindent 4 }}
type: Opaque
data:
  redis-password: {{ .Values.passwords.redisPassword | default (randAlphaNum 32) | b64enc | quote }}
  db-password: {{ .Values.passwords.dbPassword | default (randAlphaNum 32) | b64enc | quote }}
  manager-token: {{ .Values.passwords.managerToken | default (uuidv4) | b64enc | quote }}
  service-token: {{ .Values.passwords.serviceToken | default (uuidv4) | b64enc | quote }}
  admin-password: {{ .Values.passwords.adminPassword | default (randAlphaNum 32) | b64enc | quote }}
  user-password: {{ .Values.passwords.userPassword | default (randAlphaNum 32) | b64enc | quote }}

---
{{/*
External Database Secret (if using external database with existing secret)
*/}}
{{- if and .Values.database.external.enabled .Values.database.external.existingSecret }}
{{- $secretName := .Values.database.external.existingSecret }}
{{- $secret := (lookup "v1" "Secret" (include "kasm.namespace" .) $secretName) }}
{{- if not $secret }}
{{- fail (printf "External database secret '%s' not found in namespace '%s'" $secretName (include "kasm.namespace" .)) }}
{{- end }}
{{- end }}

{{/*
External Redis Secret (if using external Redis with existing secret)
*/}}
{{- if and .Values.redis.external.enabled .Values.redis.external.existingSecret }}
{{- $secretName := .Values.redis.external.existingSecret }}
{{- $secret := (lookup "v1" "Secret" (include "kasm.namespace" .) $secretName) }}
{{- if not $secret }}
{{- fail (printf "External Redis secret '%s' not found in namespace '%s'" $secretName (include "kasm.namespace" .)) }}
{{- end }}
{{- end }}